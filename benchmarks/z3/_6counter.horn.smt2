(declare-rel state (Bool Bool Bool Bool Bool Bool Bool Bool Bool))
(declare-var |_OK_| Bool)
(declare-var |_OK_.next| Bool)
(declare-var |a| Bool)
(declare-var |a.next| Bool)
(declare-var |b| Bool)
(declare-var |b.next| Bool)
(declare-var |c| Bool)
(declare-var |c.next| Bool)
(declare-var |flby| Bool)
(declare-var |flby.next| Bool)
(declare-var |flby2| Bool)
(declare-var |flby2.next| Bool)
(declare-var |flby3| Bool)
(declare-var |flby3.next| Bool)
(declare-var |flby4| Bool)
(declare-var |flby4.next| Bool)
(declare-var |flby5| Bool)
(declare-var |flby5.next| Bool)

(define-fun .init () Bool
(let ((.def_28 (= flby5 _OK_)))
(let ((.def_26 (= flby a)))
(let ((.def_29 (and .def_26 .def_28)))
(let ((.def_24 (= flby2 b)))
(let ((.def_30 (and .def_24 .def_29)))
(let ((.def_22 (= flby3 c)))
(let ((.def_31 (and .def_22 .def_30)))
(let ((.def_14 (not flby)))
(let ((.def_12 (not flby2)))
(let ((.def_15 (and .def_12 .def_14)))
(let ((.def_10 (not flby3)))
(let ((.def_16 (and .def_10 .def_15)))
(let ((.def_18 (and .def_16 flby4)))
(let ((.def_20 (and .def_18 flby5)))
(let ((.def_32 (and .def_20 .def_31)))
.def_32))))))))))))))))

(define-fun .trans () Bool
(let ((.def_62 (not c)))
(let ((.def_61 (not b)))
(let ((.def_63 (and .def_61 .def_62)))
(let ((.def_64 (and a .def_63)))
(let ((.def_54 (not a)))
(let ((.def_60 (and b .def_54)))
(let ((.def_65 (or .def_60 .def_64)))
(let ((.def_66 (= flby2.next .def_65)))
(let ((.def_59 (= flby.next .def_54)))
(let ((.def_67 (and .def_59 .def_66)))
(let ((.def_56 (and b a)))
(let ((.def_55 (and c .def_54)))
(let ((.def_57 (or .def_55 .def_56)))
(let ((.def_58 (= flby3.next .def_57)))
(let ((.def_68 (and .def_58 .def_67)))
(let ((.def_53 (= b flby4.next)))
(let ((.def_69 (and .def_53 .def_68)))
(let ((.def_49 (not b.next)))
(let ((.def_50 (= flby4 .def_49)))
(let ((.def_51 (= flby5.next .def_50)))
(let ((.def_70 (and .def_51 .def_69)))
(let ((.def_44 (= flby5.next _OK_.next)))
(let ((.def_41 (= flby.next a.next)))
(let ((.def_45 (and .def_41 .def_44)))
(let ((.def_38 (= flby2.next b.next)))
(let ((.def_46 (and .def_38 .def_45)))
(let ((.def_35 (= flby3.next c.next)))
(let ((.def_47 (and .def_35 .def_46)))
(let ((.def_28 (= flby5 _OK_)))
(let ((.def_26 (= flby a)))
(let ((.def_29 (and .def_26 .def_28)))
(let ((.def_24 (= flby2 b)))
(let ((.def_30 (and .def_24 .def_29)))
(let ((.def_22 (= flby3 c)))
(let ((.def_31 (and .def_22 .def_30)))
(let ((.def_48 (and .def_31 .def_47)))
(let ((.def_71 (and .def_48 .def_70)))
.def_71))))))))))))))))))))))))))))))))))))))

(define-fun .property () Bool
_OK_)

(rule (=> .init (state |_OK_| |a| |b| |c| |flby| |flby2| |flby3| |flby4| |flby5|)))
(rule (=> (and (state |_OK_| |a| |b| |c| |flby| |flby2| |flby3| |flby4| |flby5|) .trans) (state |_OK_.next| |a.next| |b.next| |c.next| |flby.next| |flby2.next| |flby3.next| |flby4.next| |flby5.next|)))
(declare-rel benchmark_query ())
(rule (=> (and (state |_OK_| |a| |b| |c| |flby| |flby2| |flby3| |flby4| |flby5|) (not .property)) benchmark_query))
(query benchmark_query)
